                     _                       _
                __ _| | __ _  ___  ___ _ __ | |__   ___ _ __ ___
               / _` | |/ _` |/ _ \/ __| '_ \| '_ \ / _ \ '__/ _ \
              | (_| | | (_| | (_) \__ \ |_) | | | |  __/ | |  __/
               \__,_|_|\__, |\___/|___/ .__/|_| |_|\___|_|  \___|
                       |___/          |_|
                                                _
                           __ _ _ __ __ _ _ __ | |__
                          / _` | '__/ _` | '_ \| '_ \
                         | (_| | | | (_| | |_) | | | |
                          \__, |_|  \__,_| .__/|_| |_|
                          |___/          |_|

================================
	Goal
================================
The goal of this software is to create graph of CI (center of interest) in different format, and in different language, for the algosphere alliance. (http://algosphere.org/)

================================
	Minimal configuration
================================
You need :
- python 3.0 or highter
- graphviz 2.38 or highter (can certainly work with a lower version)
- scons 2.3.5 or highter (can certainly work with a lower version)
- my python_libs (git@github.com:dionisos2/python_libs.git)
Optional :
- pytest 3.2 or highter (can certainly work with a lower version)
- pytest-cov 2.5 or highter (can certainly work with a lower version)
================================
	Authors
================================
Denis Baudouin <denis.baudouin@gmail.com> (main developper)

================================
	Official git repository
================================
https://github.com/dionisos2/CI
If you want to clone it :
git git@github.com:dionisos2/CI.git

================================
	Licence
================================
Algosphere-Graph is Free Software.
(learn more: http://www.gnu.org/philosophy/free-sw.html)

Algosphere-Graph is released under the Gnu GPLv2 license.
Please read the COPYING file for details.

================================
	How to use
================================
Algosphere-Graph is used by a command-line interface.
First you need to create a xml file, where you will add all the CI. (in fact you already have a ci.xml file, almost up to date with the algosphere alliance)
See "how to add CI" section for more information
Next you should use a few command-line:

>> scons -Q
Will create or update all usefull files
>> scons -Q ./output/ci-french.svg
Will create or update the ci-french.svg file (graph picture for the french language)
>> scons -Q french
Will create or update all usefull files for the french language. (see the file languages.yml to know what languages you could use)
>> scons -Q update_yml
Will create or update the translation file in ./translations, with the new items i ci.xml

================================
	Tranlations
================================
You could add new languages in language.yml file (at the root of the main directory)
Just follow the given format "french:fr"
To know the correspondance in the ISO 639-1 norm :
(https://fr.wikipedia.org/wiki/Liste_des_codes_ISO_639-1)
Then you could do
>> scons -Q update_yml
to create the all the translation files in the "translation" directory

You could edit the file in "translation" to complete the translation in different languages.
By example, you could open "translation/french.yml" and replace "a example: '#untranslated'" by "a example: 'un exemple'"
This new translation will be taking into account in all the generated files.
================================
	How to add CI
================================
If you want to add a new CI, look at ci.xml, the way to do it is pretty straightforward.
  <CI>
	<name>Original name of the CI</name>
	<url>Official url of the CI</url>
	<date>2013-11-24</date>
  </CI>

================================
	Utility graph
================================
The main graph of this program is the 'utility' graph, you could find it in "ci-utility.xml"
When you add a new CI, to update the utility graph you should do two complex task:
- add the children of this CI
- and add the parents of this CI.

ex:
  <CI>
	<name>Name of the new CI</name>
	<children>
		<child>Name of a child CI</child>
		<child>Name of another child CI</child>
	</children>
  </CI>

Add the children :
You should look through the list of CI, and whenever you find a CI that could be see as a specific way to go in the direction of the goal of the new CI, you should add it as a child of the new CI.
The child CI should be seen entirely as a specific way, and not partially, if part of a child CI does not have link with its parent, itâ€™s not a child.

Add the parents :
It exactly the symmetry of the add of children.
You should look through the list of CI, and if the new CI could be see as a specific way to go in the direction of the goal of this CI, you should add the new CI as a child of this CI.

================================
	Tests
================================
>> py.test --cov-report html --cov src/ tests/

================================
	Generated files
================================

file by extension:
.html : Hypertext Markup Language file, open it with a browser (eg: firefox).
.dot : graphviz file, open it with a text editor, this files are used to generate the .svg files
.svg : Scalable Vector Graphics, a image file, open it with a browser or a image viewer.
.yml : YAML file, open it with a text editor.